\documentclass{article}

%\VignetteIndexEntry{rcppbind: A R/C++ template class library}

\usepackage{mymacro}
\lstset{language=c++}
\lstset{linewidth=9cm,frameround=tttt,basicstyle=\ttfamily,keywordstyle={}}

\parindent=0in
\parskip=.3cm

\def\C++{C{\raise 0.2ex\hbox{++}}}
\newcommand{\R}{$\bfR$}

\title{rcppbind: A \R/\C++ template class library}
\date{July 1, 2008}

\author{Gang Liang $<$gumpleon@gmail.com$>$}

\begin{document}
\maketitle

\begin{abstract}%
  Being one of the most powerful open-source statistical softwares,
  \R\ is flexible and easy to master
  for statisticians. But unfortunately, it is quite difficult for
  developers to write softwares for \R\ using some low-level programming languages
  such as \C++: under such circumstances, developers are
  forced to learn a great deal of internal structures and
  low-level operations of \R\ in order to manipulate \R\ objects.  The
  goal of this template library, \texttt{rcppbind}, is to
  provide a simple interface between \C++\ and \R, so
  \R/\C++\ developers can access \R\ objects in usual \C++\
  ways. It is the wish of the author that the burden on
  developers could be lessen in some degree.%
\end{abstract}

\section{Introduction}

The package \texttt{rcppbind} installs necessary \C++\ header
files and help files, and provides several demos on how to
use the template library. It contains only two \R\ functions:
\begin{enumerate}
  \item \texttt{rcppbind.demo}: some demonstration
    modules using the rcppbind template class library;
  \item \texttt{rcppbind.path}: return the path to the
    installed header files.
\end{enumerate}

\subsection{Library Design}

Different from \C++ being a strong-type language, \R\ is of
weak type. In other words, all \R\ objects are handled
through an \textsl{SEXP} (simple expression) interface, which
is an opaque pointer. Each \R\ object has a class type, such
as \texttt{vector, matrix, list, data.frame}, and a data
type, such as \texttt{int, double, Rcomplex, char*, Date,
POSIXct}. Some examples of \R\ objects are a
vector of integers or a matrix of doubles. A simple but
important fact is that even a single integer in \R\ is indeed
a vector of integer of length 1.  R

The basic idea of \texttt{rcppbind} is to define a set of
classes to wrap \R\ objects in order to minimize the
effort of \R/\C++\ developers in mastering many low-level \R\
operations.  Roughly speaking (not precise), class types can
be viewed as wrappers for data types.  Currently, the
following four class types are supported by the
\texttt{rcppbind} template library:
\begin{center}
  \begin{tabular}{r|rrrrr} \hline\hline
    \R                & \texttt{vector} & \texttt{matrix} & \texttt{data.frame} & \texttt{list} \\
    \texttt{rcppbind} & \texttt{rvector} & \texttt{rmatrix} & \texttt{rdataframe} & \texttt{rlist} \\
    \hline\hline
  \end{tabular}
\end{center}
Among them, \texttt{rvector} and \texttt{rmatrix} are
template classes, while \texttt{rdataframe} and
\texttt{rlist} are regular classes. These classes serve as a
wrapper for fundamental data types. Details on how to wrap
\R\ objects can be found in Sec~\ref{sec:classtypes} and
Sec~\ref{sec:entrance-exit}.

Not all data types are born equal: some special data types
need special treatments, most noticeably \texttt{char*}. The
following \texttt{rcppbind} classes are designed to wrap
these outliers: 
\begin{center}
  \begin{tabular}{r|rrr} \hline\hline
    \R                & \texttt{char*} & \texttt{Date} & \texttt{POSIXct} \\
    \texttt{rcppbind} & \texttt{rstring} & \texttt{rdate} & \texttt{rtime} \\
    \hline\hline
  \end{tabular}
\end{center}
A detailed account of these special data types can be found
in Sec~\ref{sec:datatypes}.

In order to simplify the library design, the following
design specifications are imposed:
\begin{enumerate}
  \item The library only supports \texttt{.Call} interface in
    \R. This decision is made simply for convenience.
    Interested readers please refer to \R\ manual ``Writing
    \R\ Extensions''.
  
    As a consequence, the \texttt{rcppbind} library only
    supports the positional parameter-matching calling
    convention, which is natural for \C++. Since \R\
    also supports a name-matching calling convention: it can
    be implemented inside the \R\ function before the
    \texttt{.Call} interface.

  \item In order to bind with \texttt{rcppbind} objects, one
    needs to know both class and data types of \R\ objects:
    both class and data types have to be matched.

    An exception to this rule is that internal conversions
    will be performed for certain commonly convertible data
    types. For instance, a vector of integer in \R\ will be
    automatically converted to \texttt{rvector<double>}
    if such type is declared to wrap the input \R\ object. An
    exception will be thrown If the data type does not match
    and a conversion is not possible.

  \item In \R\, an object has to be protected before
    accessing its data area. This protect/unprotect mechanism
    is automatically enforced under the template library
    framework: a \texttt{rcppbind} object is protected
    when constructed, and unprotected when deleted.
    
    In order to be 100\% worry-free, the template library
    uses \texttt{UNPROTECT\_PTR} to unprotect objects. The
    normal use of \texttt{PROTECT} will cause some potential
    problems since it is not the library but the developer
    who dictates the order of the object creation and
    deletion. 
    
    The use of \texttt{UNPROTECT\_PTR} over \texttt{PROTECT}
    has a small performance penalty. Hence, it is strongly
    recommended (but not required) that library users declare
    objects in a first-declare-last-delete fashion.
\end{enumerate}

\subsection{Library Usage}

It is author's presumption that such a template library is
used to code some computational intensive modules by taking
advantage of efficiency of \C++\ over \R, and easiness of
\C++\ over C. The general flow of a \R/\C++\ module would be
\begin{enumerate}
  \item wrap \R\ input parameters;
  \item do operations using whatever \C++\ data structures,
    functions, and tricks;
  \item return computation results to \R.
\end{enumerate}
There are two important questions from a developer's point of
view:
\begin{enumerate}
  \item how to enter and exit a \texttt{rcppbind} module, what syntax?
  \item how to bind \R\ objects inside a \texttt{rcppbind} module?
\end{enumerate}
These questions are of course interrelated. Below we will
first show how \R\ objects are binded in \texttt{rccpbind}:
it contains more details. On the other hand, it might be a
good idea to read Sec~\ref{sec:entrance-exit} first on the
entrance and exit of a \texttt{rcppbind} module to get
an overview sense of the template package.

\section{Class Types}\label{sec:classtypes}

In the current implementation, the template library only
supports four class types. Internally, \texttt{vector, list}
are the two most fundamental class types: all other class
types are derived from them. For instance, \texttt{matrix} is
internally \texttt{vector}, \texttt{data.frame} is
implemented through \texttt{list}.

\subsection{\texttt{rvector}}

The class template \texttt{rvector<T>} is designed to wrap
\R\ vector objects. The currently supported data types,
\texttt{T}, are \texttt{int, double, Rcomplex, char*, rdate,
rtime}.  Some of the most useful member functions of
\texttt{rvector<T>} are
\begin{enumerate}
  \item \texttt{rvector<T> (SEXP)}: constructor to wrap an
    existing \texttt{vector} object
  \item \texttt{rvector<T> (int)}: construct a new
    \texttt{rvector<T>}
  \item \texttt{int length()}: return the length of the
    vector
  \item \texttt{T* begin(), end()}: return the begin and end
    of the iterators of the vector
  \item \texttt{T\& operator [int], T\& operator [std::string]}: subset operator
  \item \texttt{operator =, *=, +=, -=}: (for numeric data
    types only)
\end{enumerate}

\subsubsection*{Notes}

\begin{enumerate}
  \item It is preferred to use iterators returned by
    \texttt{begin(), end()} to access members of a \R\ vector
    object. There is a small penalty of using
    \texttt{operator []}: the validity of the index will be
    checked when when each time called.
  \item The subset \texttt{operator []} is overloaded: it
    also supports searching elment by dimname -- a
    \texttt{std::string} object.
  \item \texttt{rvector<rstring>, rvector<rdate>,
    rvector<rtime>} are wrappers for special data types. See
    Sec~\ref{sec:datatypes} for more details.
\end{enumerate}

\subsection{\texttt{rmatrix}}

The class template \texttt{rmatrix<T>} is designed to wrap
\R\ matrix objects.  The currently supported data types
\texttt{T} are \texttt{int, double, Rcomplex, char*, rdate,
rtime}.  A list of important member functions of
\texttt{rmatrix<T>} is as follows:
\begin{enumerate}
  \item \texttt{rmatrix<T> (SEXP)}: constructor for an
    existing \R\ matrix
  \item \texttt{rmatrix<T> (int nrow, int ncol)}: constructor
  \item \texttt{int nrow(), ncol()}: return the dimension
    info of the object
  \item \texttt{T* begin(), end()}: the begin and end
    iterator of the whole data block
  \item \texttt{T* cbegin(int n), cend(int n)}: the begin and
    end iterators of the $n$th column;
  \item \texttt{T* cbegin(std::string), cend(std::string)}:
    the begin and end iterators of the column with the given
    name;
  \item \texttt{T\& operator (int nrow, int ncol)}: element access
  \item \texttt{operator =, *=, +=, -=} (for numeric data
    types only)
\end{enumerate}

\subsubsection*{Notes}

\begin{enumerate}
  \item Similar to \texttt{rvector}, it is preferred to use
    iterators returned by \texttt{cbegin, cend} to access
    column members of a \R\ matrix object: \R\ is a
    column-prior language.  The element access operator
    \texttt{()} would check the validity of the index each
    time when called.
  \item \texttt{rmatrix<rstring>, rmatrix<rdate>,
    rmatrix<rtime>} are wrappers for matrix of special data
    types. See Sec~\ref{sec:datatypes} for more details.
\end{enumerate}

\subsection{rdataframe}

The class \texttt{rdataframe} is designed to wrap \R\
\texttt{data.frame} objects, which are data tables of
rectangular shape. \texttt{rdataframe} is a regular class,
and we need to further bind each column of a
\texttt{rdataframe} object with a \texttt{rvector} object to
retrieve data from a data.frame object.  A list of important
member functions of \texttt{rdataframe} is as follows:
\begin{enumerate}
  \item \texttt{rdataframe(SEXP)}: constructor for wrapping
    an existing SEXP
  \item \texttt{rdataframe(int, int, std::vector<const
    std::type\_info*>\&, std::vector<std::string>\&)}: create
    a new data.frame object
  \item \texttt{rvector<T> getColumn(n)}: retrieve the $n$th
    column of the data.frame
  \item \texttt{rvector<T> getColumn(colname)}: retrieve the
    column with the given column name
  \item \texttt{SEXPTYPE getColType(n)}: return type of the $n$th column

  \item \texttt{int nrow(), ncol()}: return the dimension information
  \item \texttt{std::vector<std::string>\& getColNames()}:
    return the column names;
  \item \texttt{void setColNames(std::vector<std::string>\&)}: set column names
\end{enumerate}

\subsubsection*{Notes}
\begin{enumerate}
  \item Again, one needs to know both class and data types of
    a column in order to bind it with a \texttt{rvector}
    object. The usual syntax for applying the template member
    function \texttt{getColumn} is as follows:
    \begin{lstlisting}
    rdataframe df = ...
    rvector<double> datavec = df.getColumn<double>(0);
    \end{lstlisting}
  \item In order to construct a \texttt{rdataframe} object of
    interest, one needs to provide the dimension information,
    each column type info, plus column names. The column type
    info is denoted as \texttt{std::vector<const
    std::type\_info*}. The reason to use type info instead of
    \texttt{SEXPTYPE} is because it contains the complete information
    to determine the class type. See \texttt{demo\_df.cpp}
    for an example.
\end{enumerate}

\subsection{rlist}

The class \texttt{rlist} is designed to wrap \R\
\texttt{list} objects: \texttt{list} is the most flexible
class type in \R. A list of important member functions of
\texttt{rlist} is as follows:
\begin{enumerate}
  \item \texttt{rlist( SEXP sexp )}
  \item \texttt{rlist( int size, std::vector<std::string>
    strname = NULL )}
  \item \texttt{int size()}: return the size of the list
  \item \texttt{void setElement( int index, SEXP sexp )}
  \item \texttt{SEXP getElement( int  index )}
\end{enumerate}

\subsubsection*{Notes}
\begin{enumerate}
  \item The above \texttt{getColumn} and \texttt{setColumn}
    member functions can also take a \texttt{std::string}
    argument for searching elements by name.
  \item Both functions \texttt{getColumn} and
    \texttt{setColumn} takes or returns parameter of type
    \texttt{SEXP} because the underlying objects are unclear
    to the class itself.  Nevertheless, the \texttt{rcppbind}
    framework provides a general approach for handling these
    opaque \texttt{SEXP} pointers. Generally speaking,
    module writers know the types of these objects; hence, it
    is his/her responsibility to manually wrap these objects
    with the corresponding \texttt{rcppbind} classes. See
    \texttt{demo\_list.cpp} for a simple example.
\end{enumerate}

\section{Data Types}\label{sec:datatypes}

We discuss three special data types in this section. One
thing in common among these three data types is all these
wrapper classes for data types are served as intermediate to
access the underlying data members.

\subsection{rstring}

\texttt{char*} is a special data type which needs special
treatments because a character string itself is a
\textsl{SEXP} object in \R, so one more layer of indirection
has to be added to process \texttt{char*} data. The iterators
of \texttt{rvector<rstring>} and \texttt{rmatrix<rstring>}
are pointers to \texttt{rstring} object. Let \texttt{ptr} be
an iterator of \texttt{rvector<rstring>} (a pointer to
\texttt{rstring}). 
\begin{enumerate}
  \item The syntax to modify (or replace, to be precise) the
    character string being pointed is
    \begin{lstlisting}
    rvector<rstring>::iterator ptr = ...;
    *ptr = rstring("new string");
    \end{lstlisting}
  \item The syntax to extract the character string data from
    \texttt{ptr} is
    \begin{lstlisting}
    const char* str = ptr->c_str();
    \end{lstlisting}
    In other words, \texttt{rstring} is used as an
    intermediate to access elements of a string vector
    without knowing the underlying \R\ mechanism.
\end{enumerate}
See \texttt{demo\_str} for a simple example on how to
manipulate string characters.

\subsection{rdate}

The class \texttt{rdate} is wrapper for \R\ data type \texttt{"Date"}.
\R\ is a flexible system that a \texttt{"Date"} object could
be any numeric value (integer or real) as long as the value
is valid: it causes ambiguities for programmers.  Under the
\texttt{rcppbind} framework, the wrapper class \texttt{rdate}
is enforced to be integer values. A set of member functions
are provided to access the date information contained in the
given data; hence, the low-level implementation is hidden to
library users. A list of member functions is as follows:
\begin{enumerate}
  \item \texttt{time(struct tm\& tm)}: return the date info
    using a \texttt{tm} structure.
  \item \texttt{int operator-(const rdate\&)}: return the date difference;
  \item \texttt{rdate operator+(int)}: forward a date object;
  \item \texttt{static void date2tm(int date, struct tm\& tm),
    static int tm2date(const struct tm\& tm)}: date and
    \texttt{tm} conversion.
\end{enumerate}
 
\subsection{rtime}
 
The class \texttt{rtime} is wrapper for \R\ datatime type
\texttt{"POSIXct"}. Time is always a confusing issue on most
systems. In \R, there are two classes for time variables:
\texttt{POSIXlt, POSIXct}.
\begin{enumerate}
  \item The \texttt{POSIXct} (a calendar-time in POSIX
    standard) is a numeric value internally, while
    \texttt{POSIXlt} (a local-time in POSIX standard) is
    indeed a list with 9 fields.

    The benefit of \texttt{POSIXlt} is that all time
    information can be directly accessed from those 9 fields.
    Its disadvantage is that we cannot have a vector of
    \texttt{POSIXlt}: there is no such thing called a vector
    of list in \R. On the other hand, the compact form is
    just a numeric value (mostly real). We can put
    \texttt{POSIXct} in various data structures, but we need
    to compute time information from the numeric value.

    Indeed, the computational penalty brought by
    \texttt{POSIXct} is minimal.
  \item Many times, we see date-time object in \R\ with class
    attribute \texttt{POSIXt}. It is inherited from the above
    two classes to allow operations between \texttt{POSIXct}
    and \texttt{POSIXlt}.
\end{enumerate}

Under the \texttt{rcppbind} framework, the wrapper class
\texttt{rtime} is enforced to be real values -- natural for
\texttt{POSIXct}. A set of member functions are provided to
access the time information contained in the object. A list
of member functions is as follows:
\begin{enumerate}
  \item \texttt{void time(struct tm\& tm)} 
  \item \texttt{double operator-(const rtime\& obj)}: compute the time difference;
  \item \texttt{rtime operator+(double timediff)}: forward a time;
  \item \texttt{static void time2tm(double time, struct tm\&
    tm)}: time to \texttt{tm} structure;
  \item \texttt{static double tm2time(const struct tm\& tm)}:
    \texttt{tm} structure to time.
\end{enumerate}

\subsubsection*{Notes}
\begin{enumerate}
  \item The timezone information of \texttt{rtime} is NOT
    implemented: the default timezone is always assumed to be
    ``GMT''.
    
    There is a reason for doing so. Consider a \R\
    \texttt{POSIXct} object wrapped by
    \texttt{rvector<rtime>}. Timezone is actually an
    attribute of \texttt{vector} object, but not that of
    \texttt{rtime} objects. As an element of the datetime
    vector, a \texttt{rtime} is simply a real value
    internally.
\end{enumerate}

\section{Entrance \& Exit}\label{sec:entrance-exit}

\subsection{Entrance -- Retrieving Information from R}

In order to minimize the programmers' burden in retrieving
\R\ objects from the \texttt{.Call} interface, a set of
rcppbind macros are defined to automatically wrap \R\ objects
into \C++\ objects under the \texttt{rcppbind} framework.
The syntax of the interface is as follows:
\begin{itemize}
  \item[] \texttt{RCPP\textsl{n}(\textsl{module\_name}, T1, ..., T\textsl{n})}
\end{itemize}
where \texttt{RCPP\textsl{n}} is a macro which defines a
\texttt{rcppbind} module, \texttt{\textsl{module\_name}},
with $n$ parameters, and \texttt{T1, ..., T\textsl{n}} are
the types of input arguments. The
\texttt{\textsl{module\_name}} is the entry point not only to the
\texttt{.Call} interface, but also to the function of real
implementation. One typical example is as follows:
\begin{lstlisting}
    #include <rcppbind.h>

    RCPP2(mymodule, double, rvector<double>);
    SEXP mymodule(const double& t1, const rvector<double>& t2) { ...; }
\end{lstlisting}
Inside \R, the \texttt{.Call} interface for calling this
module is as follows:
\begin{itemize}
  \item[] \texttt{mymodule <- function(x, y) .Call("mymodule", x, y)}
\end{itemize}
Of course, the module has to be loaded before the \R\
``\texttt{mymodule}'' function could be called. It is also a
good practice to ensure both \texttt{x, y} are of right types
inside the \R\ function \texttt{mymodule}.

\subsubsection*{Notes}
\begin{itemize}
  \item The current implementation only support 0 to 9 input
    arguments. If your module has more than 9 input
    parameters, please check the header file
    \texttt{rmacro.h} and define your own macro
    accordingly.
  \item The types \texttt{T1, \ldots, T\textsl{n}} in the
    macro definition can only be wrapper classes:
    \texttt{rvector, rmatrix, rdataframe, rlist}, and some
    primitive types, such as \texttt{int, Rcomplex, char*,
    rdate, rtime}.
  \item All input arguments are declared as references to
    constants: the template library strictly enforces the \R\
    parameter-passing convention.
  \item The \C++\ exception mechanism is used in
    \texttt{\textsl{module\_name}}. If an error occurs during
    the execution of the module, the program will exit nicely
    and return the control to \R.
  
    Argument type checking is performed in the
    \texttt{RCPP\textsl{n}} macro to ensure that input
    arguments are of the right types. An exception will be
    thrown if the parameter type does not match.
\end{itemize}

\subsection{Exit -- Returning Objects to R}

The real implementation function is of the form:
\begin{itemize}
  \item[] \texttt{SEXP \textsl{module\_name}(const ...);}
\end{itemize}
The return type of the function is always \texttt{SEXP}. In
\texttt{rcppbind}, all wrapper classes for class types,
namely \texttt{rvector, rmatrix, rlist, rdataframe}, are
derived from a common base-class \texttt{robject}, where an
operator \texttt{SEXP} is defined to convert them implicitly
to \texttt{SEXP}. Hence, under the template framework,
developers only needs to return a \texttt{rcppbind} object
in the end without concerning the \textsl{SEXP} issue.

\subsubsection*{Notes}

\begin{itemize}
  \item If one wants to return an integer value to \R, one
    needs to return a vector of integer of length 1.  The
    same to \texttt{double, char*}, etc.
  \item For more complicated data structures, one has to rely
    on \texttt{rlist}. It is recommended to manipulate class
    attribute inside the \R\ function to the \texttt{.Call}
    interface.
  \item \texttt{R\_NilValue} can be returned for nothing.
\end{itemize}

\section{Summary}\label{sec:summary}

A quick summary of the \texttt{rcppbind} template library:
\begin{enumerate}
  \item The only header file needs to be included in your
    project is \texttt{rcppbind.h}.
  \item The module name in the \texttt{RCPP\textsl{n}} macro
    serves as entry point not only to the \texttt{.Call}
    interface, but also to the function of real
    implementation.
  \item One needs to know both class and data types of an \R\
    object in order to bind it: some internal conversion
    might occur.
  \item The \C++\ implementation function takes constant
    references as input arguments.
  \item The template library only supports \texttt{.Call}
    interface.
  \item The library supports four class types. More
    complicated classes can be derived from \texttt{list}.
  \item Classes \texttt{rstring, rdate, rtime} are used as an
    intermediate to access \texttt{char*, Date, POSIXct} data
    respectively.
  \item Return a \texttt{rcppbind} object to \R\ at the end
    of the your code.
  \item The index starts at $0$ in \C++, while $1$ in \R.
\end{enumerate}

\section{Acknowledgement}

I would like to thank Dominick Samperi for developing and
releasing the \texttt{rcpp} package. It has similar
functionalities as mine, and I even considered the
possibility of merging mine within his package.  Eventually,
since two designs are drastically different, I decide to
release my code into a separate package instead.
Nevertheless, many good ideas and codes are shamelessly
stolen from Samperi directly.

\end{document}
